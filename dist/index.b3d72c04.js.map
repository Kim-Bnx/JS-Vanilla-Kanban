{"mappings":"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","sources":["<anon>","src/assets/js/app.js","src/assets/js/list.js","src/assets/js/utils.js","src/assets/js/card.js","src/assets/js/tag.js"],"sourcesContent":["const $c072e7e9da7baaac$var$utils = {\n    hideModals: function() {\n        document.querySelectorAll(\".modal\").forEach((modal)=>modal.classList.remove(\"is-active\"));\n    }\n};\nvar $c072e7e9da7baaac$export$2e2bcd8739ae039 = $c072e7e9da7baaac$var$utils;\n\n\n\n\nconst $9dd025d1c1b722d2$var$tagModule = {\n    // CREATE TAG HTML ELEMENT\n    makeInDOM: function(tag) {\n        const tagDOM = document.createElement(\"span\");\n        tagDOM.dataset.tagId = tag.id;\n        tagDOM.textContent = tag.name;\n        tagDOM.style.backgroundColor = tag.color;\n        tagDOM.classList.add(\"tag\", \"has-text-white\");\n        // Get card container\n        const cardDOM = document.querySelector(`.box[data-card-id=\"${tag.card_has_tag.card_id}\"]`);\n        // Add tag in DOM\n        cardDOM.querySelector(\".tags\").appendChild(tagDOM);\n    },\n    // CREATE CHECKBOX INPUT ELEMENT FOR FORM\n    makeInForm: function(tag, isChecked) {\n        // Label\n        const label = document.createElement(\"label\");\n        label.classList.add(\"checkbok\", \"is-block\");\n        label.setAttribute(\"data-tags-id\", tag.id);\n        label.textContent = tag.name;\n        // Checkbox input\n        const input = document.createElement(\"input\");\n        input.setAttribute(\"type\", \"checkbox\");\n        input.setAttribute(\"name\", tag.name);\n        // Check status\n        input.checked = isChecked;\n        label.prepend(input); // child of the label\n        // Add input in the form dom\n        document.querySelector(\"#addTagModal .field\").append(label);\n    },\n    // UPDATE TAG CARD\n    // Show modal to customize the tag card\n    showCustomModal: async function(event) {\n        // Get the card\n        const card = event.target.closest(\".box\");\n        const cardId = card.dataset.cardId;\n        // Target the modal and update the form with the card id\n        const modal = document.querySelector(\"#addTagModal\");\n        modal.querySelector('[name=\"id\"]').value = cardId;\n        // Get all the tags of the card to make an array with their id\n        const cardTags = Array.from(card.querySelectorAll(\".tag\"));\n        const associatedTagId = cardTags.map((tag)=>parseInt(tag.dataset.tagId));\n        let response;\n        try {\n            // Fetch all the API tags to display them in the form\n            response = await fetch(\"/tags\", {\n                method: \"GET\"\n            });\n            if (response.ok) {\n                const tags = await response.json();\n                // Empty the form so it doesn't interfere with other modifications tag\n                const field = document.querySelector(\"#addTagModal .field\");\n                field.innerHTML = \"\";\n                tags.forEach((tag)=>{\n                    // Check the box if the tag is already associated with the card\n                    if (associatedTagId.includes(tag.id)) $9dd025d1c1b722d2$var$tagModule.makeInForm(tag, true);\n                    else $9dd025d1c1b722d2$var$tagModule.makeInForm(tag, false);\n                });\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n        // Show modal\n        document.querySelector(\"#addTagModal\").classList.add(\"is-active\");\n    },\n    // UPDATE TAG CARD\n    // Submit the modificated tags\n    handleCustomTag: async function(event) {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n        // To have the card id\n        const param = {};\n        formData.forEach((value, key)=>param[key] = value);\n        // Get all the check input tag\n        const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]:checked');\n        const checkedIds = [];\n        // Get the id of the check input tag\n        checkboxes.forEach((checkbox)=>{\n            const tagId = checkbox.parentElement.getAttribute(\"data-tags-id\");\n            if (tagId) checkedIds.push(parseInt(tagId, 10)); // Parsing the ID as an integer\n        });\n        // Prepare the payload in the right format\n        const payload = {\n            tagsId: JSON.stringify([\n                ...checkedIds\n            ])\n        };\n        let response;\n        try {\n            response = await fetch(\"/cards/\" + param.id + \"/tags\", {\n                method: \"PATCH\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (response.ok) {\n                const card = await response.json();\n                // Select the card and empty the old associate tag\n                const field = document.querySelector(`[data-card-id=\"${card.id}\"] .tags`);\n                field.innerHTML = \"\";\n                // Add the new associated tag\n                card.tags.forEach((tag)=>{\n                    $9dd025d1c1b722d2$var$tagModule.makeInDOM(tag, true);\n                });\n                (0, $c072e7e9da7baaac$export$2e2bcd8739ae039).hideModals();\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n    }\n};\nvar $9dd025d1c1b722d2$export$2e2bcd8739ae039 = $9dd025d1c1b722d2$var$tagModule;\n\n\nconst $7228557d9085919b$var$cardModule = {\n    // CREATE CARD HTML ELEMENT\n    makeInDOM: function(card) {\n        const cardTemplate = document.querySelector(\"#cardTemplate\").content, cardHTML = document.importNode(cardTemplate, true), cardContainer = document.querySelector(`[data-list-id=\"${card.list_id}\"] .panel-block`);\n        cardHTML.querySelector(\".box\").setAttribute(\"data-card-id\", card.id);\n        cardHTML.querySelector(\".box\").setAttribute(\"data-card-position\", card.position);\n        cardHTML.querySelector(\".card-name\").textContent = card.title;\n        // Update the form for modifications\n        cardHTML.querySelector('[name=\"id\"]').value = card.id;\n        cardHTML.querySelector('[name=\"title\"]').value = card.title;\n        // Event listeners\n        cardHTML.querySelector(\"#editCardButton\").addEventListener(\"click\", $7228557d9085919b$var$cardModule.showEditForm);\n        cardHTML.querySelector(\"form\").addEventListener(\"submit\", $7228557d9085919b$var$cardModule.handleEdit);\n        cardHTML.querySelector(\"#deleteCardButton\").addEventListener(\"click\", $7228557d9085919b$var$cardModule.handleDelete);\n        cardHTML.querySelector(\"#customTagButton\").addEventListener(\"click\", (0, $9dd025d1c1b722d2$export$2e2bcd8739ae039).showCustomModal);\n        // Add the new card in DOM\n        cardContainer.appendChild(cardHTML);\n    },\n    // ADD CARD\n    // Show modal for adding card\n    showAddModal: function(event) {\n        // Get the list ID\n        const list = event.target.closest(\".panel\");\n        // Count the number of cards to determine the position of the new one\n        const cardsNb = list.querySelectorAll(\".box\").length;\n        const listId = list.dataset.listId; // dataset[\"list-id\"]\n        const cardModal = document.querySelector(\"#addCardModal\");\n        // For the hidden input\n        cardModal.querySelector('[name=\"list_id\"]').value = listId;\n        cardModal.querySelector('[name=\"position\"]').value = cardsNb + 1;\n        document.querySelector(\"#addCardModal\").classList.add(\"is-active\");\n    },\n    // ADD CARD\n    // Submit the new card form\n    handleAddForm: async function(event) {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n        const payload = {};\n        formData.forEach((value, key)=>payload[key] = value);\n        console.log(payload);\n        let response;\n        try {\n            response = await fetch(\"/cards\", {\n                method: \"POST\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (response && response.ok) {\n                const newCard = await response.json();\n                console.log(newCard);\n                $7228557d9085919b$var$cardModule.makeInDOM(newCard);\n                event.target.reset(); // reset input\n                (0, $c072e7e9da7baaac$export$2e2bcd8739ae039).hideModals();\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            console.log(error);\n            alert(error.message);\n        }\n    },\n    // EDIT CARD\n    // Show the input to edit the card title\n    showEditForm: function(event) {\n        const editedCard = event.target.closest(\".box\");\n        editedCard.querySelector(\".card-name\").classList.add(\"is-hidden\");\n        editedCard.querySelector(\".card-name\").nextElementSibling.classList.remove(\"is-hidden\");\n    },\n    // EDIT CARD\n    // Sumbit update card title\n    handleEdit: async function(event) {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n        const payload = {};\n        formData.forEach((value, key)=>payload[key] = value);\n        // Get the card\n        const editedCard = event.target.closest(\".box\");\n        let response;\n        try {\n            response = await fetch(\"/cards/\" + payload.id, {\n                method: \"PATCH\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (response.ok) {\n                const edit = await response.json();\n                editedCard.querySelector(\".card-name\").textContent = edit.title; // Change the DOM title\n                editedCard.querySelector(\"form\").classList.add(\"is-hidden\");\n                editedCard.querySelector(\".card-name\").classList.remove(\"is-hidden\");\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n    },\n    // DELETE CARD\n    handleDelete: async function(event) {\n        const deletedCard = event.target.closest(\".box\");\n        const confirm = window.confirm(\"Are you sure you want to delete this card?\");\n        if (confirm) {\n            let response;\n            try {\n                response = await fetch(\"/cards/\" + deletedCard.dataset.cardId, {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                if (response.ok) deletedCard.remove();\n                else {\n                    const errorResponse = await response.json();\n                    throw new Error(errorResponse.error);\n                }\n            } catch (error) {\n                alert(error.message);\n            }\n        }\n    },\n    // UPDATE CARD POSITION\n    handleDragCard: function(event) {\n        let cards = event.from.querySelectorAll(\".box\");\n        // Save the position\n        $7228557d9085919b$var$cardModule.updateCards(cards);\n        // If the card is still in the same list, the function end there\n        if (event.from === event.to) return;\n        // Get the new card list and its id\n        cards = event.to.querySelectorAll(\".box\");\n        const listId = event.to.closest(\".panel\").dataset.listId;\n        // Save the position and the list container\n        $7228557d9085919b$var$cardModule.updateCards(cards, listId);\n    },\n    // SAVE CARD MODIFICATION IN API\n    updateCards: async function(cards, listId = null) {\n        cards.forEach(async (cards, index)=>{\n            // formData is empty (no form on DOM)\n            // manually set with the index (and list container if there is a new one)\n            const formData = new FormData();\n            formData.set(\"position\", index);\n            if (listId) formData.set(\"list_id\", listId);\n            let response;\n            try {\n                response = await fetch(\"/cards/\" + cards.dataset.cardId, {\n                    method: \"PATCH\",\n                    headers: {\n                        \"accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(Object.fromEntries(formData))\n                });\n                const json = await response.json();\n                if (!response.ok) throw json;\n            } catch (error) {\n                alert(\"A problem occurred while updating the new list position.\");\n                console.error(error);\n            }\n        });\n    }\n};\nvar $7228557d9085919b$export$2e2bcd8739ae039 = $7228557d9085919b$var$cardModule;\n\n\nconst $3ba4065045e1ccdf$var$listModule = {\n    // CREATE LIST HTML ELEMENT\n    makeInDOM: function(list) {\n        const list_template = document.querySelector(\"#listTemplate\").content, listHTML = document.importNode(list_template, true);\n        listHTML.querySelector(\".panel\").setAttribute(\"data-list-id\", list.id);\n        listHTML.querySelector(\".panel\").setAttribute(\"data-list-position\", list.position);\n        listHTML.querySelector(\".list-name\").textContent = list.name;\n        // Update the form for modifications\n        listHTML.querySelector('[name=\"id\"]').value = list.id;\n        listHTML.querySelector('[name=\"name\"]').value = list.name;\n        // Event listeners\n        listHTML.querySelector(\"#addCardButton\").addEventListener(\"click\", (0, $7228557d9085919b$export$2e2bcd8739ae039).showAddModal);\n        listHTML.querySelector(\"h2\").addEventListener(\"dblclick\", $3ba4065045e1ccdf$var$listModule.showEditList);\n        listHTML.querySelector(\"form\").addEventListener(\"submit\", $3ba4065045e1ccdf$var$listModule.handleEditForm);\n        listHTML.querySelector(\"#deleteListButton\").addEventListener(\"click\", $3ba4065045e1ccdf$var$listModule.handleDelete);\n        // Make the cards draggable\n        const cardContainer = listHTML.querySelector(\".panel-block\");\n        Sortable.create(cardContainer, {\n            group: \"list\",\n            draggable: \".box\",\n            onEnd: (0, $7228557d9085919b$export$2e2bcd8739ae039).handleDragCard // update list position on release\n        });\n        // Add list in dom \n        document.querySelector(\".list-container\").appendChild(listHTML);\n    },\n    // ADD LIST\n    // Show modal for adding list\n    showAddModal: function() {\n        const listNb = document.querySelectorAll(\".panel\").length;\n        const listModal = document.querySelector(\"#addListModal\");\n        listModal.querySelector('[name=\"position\"]').value = listNb + 1;\n        document.querySelector(\"#addListModal\").classList.add(\"is-active\");\n    },\n    // ADD LIST\n    // Submit the form\n    handleAddForm: async function(event) {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n        const payload = {};\n        formData.forEach((value, key)=>payload[key] = value);\n        let response;\n        try {\n            response = await fetch(\"/lists\", {\n                method: \"POST\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (response.ok) {\n                const newList = await response.json();\n                $3ba4065045e1ccdf$var$listModule.makeInDOM(newList); // make new list in DOM\n                // Scroll at the end of the container\n                const listContainer = document.querySelector(\".list-container\");\n                listContainer.scrollTo(listContainer.scrollWidth, 0);\n                event.target.reset(); // reset input                      \n                (0, $c072e7e9da7baaac$export$2e2bcd8739ae039).hideModals();\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n    },\n    // EDIT LIST\n    // Show edit form\n    showEditList: function(event) {\n        event.target.classList.add(\"is-hidden\");\n        event.target.nextElementSibling.classList.remove(\"is-hidden\");\n    },\n    // EDIT LIST\n    // Submit the edit list title form\n    handleEditForm: async function(event) {\n        event.preventDefault();\n        const data = new FormData(event.target);\n        const editedList = event.target.closest(\".panel\");\n        let response;\n        try {\n            response = await fetch(\"/lists/\" + editedList.dataset.listId, {\n                method: \"PATCH\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: data.get(\"name\")\n                })\n            });\n            if (response.ok) {\n                const edit = await response.json();\n                editedList.querySelector(\".list-name\").textContent = edit.name;\n                editedList.querySelector(\"form\").classList.add(\"is-hidden\");\n                editedList.querySelector(\"h2\").classList.remove(\"is-hidden\");\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n    },\n    // DELETE LIST\n    // Submit a delete list\n    handleDelete: async function(event) {\n        const deletedList = event.target.closest(\".panel\");\n        const confirm = window.confirm(\"Are you sure you want to delete this list?\");\n        if (confirm) {\n            let response;\n            try {\n                response = await fetch(\"/lists/\" + deletedList.dataset.listId, {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                if (response.ok) deletedList.remove();\n                else {\n                    const errorResponse = await response.json();\n                    throw new Error(errorResponse.error);\n                }\n            } catch (error) {\n                alert(error.message);\n            }\n        }\n    },\n    // UPDATE LIST POSITION\n    // Save the list position\n    handleDragList: async function() {\n        const lists = document.querySelectorAll(\".panel\");\n        lists.forEach(async (lists, index)=>{\n            // This formData is empty (there is no form on the DOM)\n            // it will be manually set with the index\n            const formData = new FormData();\n            formData.set(\"position\", index);\n            let response;\n            try {\n                response = await fetch(\"/lists/\" + lists.dataset.listId, {\n                    method: \"PATCH\",\n                    headers: {\n                        \"accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(Object.fromEntries(formData))\n                });\n                const json = await response.json();\n                if (!response.ok) throw json;\n            } catch (error) {\n                alert(\"A problem occurred while updating the new list position.\");\n                console.error(error);\n            }\n        });\n    }\n};\nvar $3ba4065045e1ccdf$export$2e2bcd8739ae039 = $3ba4065045e1ccdf$var$listModule;\n\n\n\n\n\nconst $ae2a2df1a12e9716$var$app = {\n    // Init function \n    init: async function() {\n        $ae2a2df1a12e9716$var$app.addListeners();\n        await $ae2a2df1a12e9716$var$app.getListFromAPI();\n    },\n    addListeners: function() {\n        // Open new list modals\n        document.querySelector(\"#addListButton\").addEventListener(\"click\", (0, $3ba4065045e1ccdf$export$2e2bcd8739ae039).showAddModal);\n        // Close all modals\n        const modalButtons = document.querySelectorAll(\".close, .modal-background\");\n        modalButtons.forEach((button)=>button.addEventListener(\"click\", (0, $c072e7e9da7baaac$export$2e2bcd8739ae039).hideModals));\n        // Submit new list form\n        document.querySelector(\"#addListForm\").addEventListener(\"submit\", (0, $3ba4065045e1ccdf$export$2e2bcd8739ae039).handleAddForm);\n        // Submit new card form\n        document.querySelector(\"#addCardForm\").addEventListener(\"submit\", (0, $7228557d9085919b$export$2e2bcd8739ae039).handleAddForm);\n        // Submit updated tags form\n        document.querySelector(\"#addTagForm\").addEventListener(\"submit\", (0, $9dd025d1c1b722d2$export$2e2bcd8739ae039).handleCustomTag);\n    },\n    // GET LIST FROM THE API\n    // With cards and tags includes\n    getListFromAPI: async function() {\n        let response;\n        try {\n            response = await fetch(\"/lists\", {\n                method: \"GET\"\n            });\n        } catch (error) {\n            console.error(error);\n        }\n        if (response && response.ok) {\n            const lists = await response.json();\n            lists.forEach((list)=>{\n                (0, $3ba4065045e1ccdf$export$2e2bcd8739ae039).makeInDOM(list); // Create list in DOM\n                list.cards.forEach((card)=>{\n                    (0, $7228557d9085919b$export$2e2bcd8739ae039).makeInDOM(card); // Create card\n                    card.tags.forEach((tag)=>{\n                        (0, $9dd025d1c1b722d2$export$2e2bcd8739ae039).makeInDOM(tag); // Create tag\n                    });\n                });\n                // Make all the lists draggable\n                const listContainer = document.querySelector(\".list-container\");\n                Sortable.create(listContainer, {\n                    draggable: \".panel\",\n                    onEnd: (0, $3ba4065045e1ccdf$export$2e2bcd8739ae039).handleDragList // update list position on release\n                });\n            });\n        }\n    }\n};\n// Start when DOM fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", $ae2a2df1a12e9716$var$app.init);\n\n\n//# sourceMappingURL=index.b3d72c04.js.map\n","import listModule from \"./list.js\";\r\nimport cardModule from \"./card.js\";\r\nimport tagModule from \"./tag.js\";\r\n\r\nimport utils from \"./utils.js\";\r\n\r\nconst app = {\r\n\r\n  // Init function \r\n  init: async function () {\r\n    app.addListeners();\r\n    await app.getListFromAPI();\r\n  },\r\n\r\n  addListeners: function() {\r\n    // Open new list modals\r\n    document.querySelector('#addListButton').addEventListener('click', listModule.showAddModal);\r\n\r\n    // Close all modals\r\n    const modalButtons = document.querySelectorAll('.close, .modal-background');\r\n    modalButtons.forEach(button => button.addEventListener('click', utils.hideModals));\r\n     \r\n    // Submit new list form\r\n    document.querySelector('#addListForm').addEventListener('submit', listModule.handleAddForm);\r\n\r\n    // Submit new card form\r\n    document.querySelector('#addCardForm').addEventListener('submit', cardModule.handleAddForm);\r\n\r\n    // Submit updated tags form\r\n    document.querySelector('#addTagForm').addEventListener('submit', tagModule.handleCustomTag);\r\n  },\r\n\r\n  \r\n  // GET LIST FROM THE API\r\n  // With cards and tags includes\r\n  getListFromAPI: async function() {\r\n    let response;\r\n    try {\r\n      response = await fetch('/lists', { method: 'GET' });\r\n    } catch (error) { console.error(error); }\r\n\r\n    if(response && response.ok) {\r\n      const lists = await response.json();\r\n\r\n      lists.forEach(list => {\r\n        listModule.makeInDOM(list); // Create list in DOM\r\n\r\n        list.cards.forEach(card => {\r\n          cardModule.makeInDOM(card); // Create card\r\n\r\n          card.tags.forEach(tag => {\r\n            tagModule.makeInDOM(tag); // Create tag\r\n          })\r\n        })\r\n\r\n        // Make all the lists draggable\r\n        const listContainer = document.querySelector('.list-container');\r\n        \r\n        Sortable.create(listContainer, {\r\n          draggable: '.panel',\r\n          onEnd: listModule.handleDragList // update list position on release\r\n        });\r\n      });\r\n    }\r\n  },\r\n  \r\n};\r\n\r\n// Start when DOM fully loaded\r\ndocument.addEventListener('DOMContentLoaded', app.init );","import utils from \"./utils.js\";\r\nimport cardModule from \"./card.js\";\r\n\r\nconst listModule = {\r\n  // CREATE LIST HTML ELEMENT\r\n  makeInDOM: function(list) {\r\n    const \r\n      list_template = document.querySelector('#listTemplate').content,\r\n      listHTML = document.importNode(list_template, true);\r\n\r\n    listHTML.querySelector('.panel').setAttribute('data-list-id', list.id);\r\n    listHTML.querySelector('.panel').setAttribute('data-list-position', list.position);\r\n    listHTML.querySelector('.list-name').textContent = list.name;\r\n\r\n    // Update the form for modifications\r\n    listHTML.querySelector('[name=\"id\"]').value = list.id;\r\n    listHTML.querySelector('[name=\"name\"]').value = list.name;\r\n\r\n    // Event listeners\r\n    listHTML.querySelector('#addCardButton').addEventListener('click', cardModule.showAddModal);\r\n    listHTML.querySelector('h2').addEventListener('dblclick', listModule.showEditList);\r\n    listHTML.querySelector('form').addEventListener('submit', listModule.handleEditForm);\r\n    listHTML.querySelector('#deleteListButton').addEventListener('click', listModule.handleDelete);\r\n\r\n    // Make the cards draggable\r\n    const cardContainer = listHTML.querySelector('.panel-block');\r\n    Sortable.create(cardContainer, {\r\n      group: 'list', // ref to draggable list\r\n      draggable: '.box',\r\n      onEnd: cardModule.handleDragCard // update list position on release\r\n    });\r\n\r\n    // Add list in dom \r\n    document.querySelector('.list-container').appendChild(listHTML);\r\n  },\r\n\r\n\r\n  // ADD LIST\r\n  // Show modal for adding list\r\n  showAddModal: function() {\r\n    const listNb = document.querySelectorAll('.panel').length;\r\n    const listModal = document.querySelector('#addListModal');\r\n    listModal.querySelector('[name=\"position\"]').value = listNb + 1;\r\n\r\n    document.querySelector('#addListModal').classList.add('is-active');\r\n  },\r\n\r\n  // ADD LIST\r\n  // Submit the form\r\n  handleAddForm: async function(event) {\r\n    event.preventDefault();                     \r\n    const formData = new FormData(event.target); \r\n\r\n    const payload = {};\r\n    formData.forEach((value, key) => payload[key] = value);\r\n\r\n    let response;\r\n    try {\r\n      response = await fetch('/lists', { \r\n        method: 'POST',\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if(response.ok) {\r\n        const newList = await response.json();\r\n        listModule.makeInDOM(newList); // make new list in DOM\r\n\r\n        // Scroll at the end of the container\r\n        const listContainer = document.querySelector('.list-container');\r\n        listContainer.scrollTo(listContainer.scrollWidth, 0)\r\n    \r\n        event.target.reset(); // reset input                      \r\n        utils.hideModals();    \r\n\r\n      } else {\r\n        const errorResponse = await response.json();\r\n        throw new Error(errorResponse.error);\r\n      }\r\n    } catch (error) { \r\n      alert(error.message)\r\n    }\r\n                           \r\n  },\r\n\r\n  // EDIT LIST\r\n  // Show edit form\r\n  showEditList: function(event) {\r\n    event.target.classList.add('is-hidden');\r\n    event.target.nextElementSibling.classList.remove('is-hidden');\r\n  },\r\n\r\n  // EDIT LIST\r\n  // Submit the edit list title form\r\n  handleEditForm: async function(event) {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n    \r\n    const editedList = event.target.closest('.panel');\r\n\r\n    let response;\r\n    try {\r\n      response = await fetch('/lists/' + editedList.dataset.listId, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: data.get('name')\r\n        }),\r\n      });\r\n\r\n      if(response.ok) {\r\n        const edit = await response.json();\r\n        editedList.querySelector('.list-name').textContent = edit.name;\r\n  \r\n        editedList.querySelector('form').classList.add('is-hidden');\r\n        editedList.querySelector('h2').classList.remove('is-hidden');\r\n      } \r\n      else {\r\n        const errorResponse = await response.json();\r\n        throw new Error(errorResponse.error);\r\n      }\r\n    } catch (error) { \r\n      alert(error.message)\r\n    }\r\n  \r\n  },\r\n\r\n  // DELETE LIST\r\n  // Submit a delete list\r\n  handleDelete: async function(event) {\r\n    const deletedList = event.target.closest('.panel');\r\n\r\n    const confirm = window.confirm('Are you sure you want to delete this list?');\r\n\r\n    if(confirm) {\r\n      let response;\r\n      try {\r\n        response = await fetch('/lists/' + deletedList.dataset.listId, { \r\n          method: 'DELETE',\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        });\r\n\r\n        if(response.ok) {\r\n          deletedList.remove();\r\n        } \r\n        else {\r\n          const errorResponse = await response.json();\r\n          throw new Error(errorResponse.error);\r\n        }\r\n      } \r\n        catch (error) { alert(error.message) }\r\n      } \r\n  },\r\n\r\n  // UPDATE LIST POSITION\r\n  // Save the list position\r\n  handleDragList: async function() {\r\n    const lists = document.querySelectorAll('.panel');\r\n\r\n    lists.forEach(async (lists, index) => {\r\n      // This formData is empty (there is no form on the DOM)\r\n      // it will be manually set with the index\r\n      const formData = new FormData();\r\n      formData.set('position', index);\r\n\r\n      let response;\r\n      try {\r\n      response = await fetch('/lists/' + lists.dataset.listId, {\r\n          method: 'PATCH',\r\n          headers: { \r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(Object.fromEntries(formData)),\r\n      });\r\n\r\n      const json = await response.json();\r\n\r\n      if (!response.ok) throw json;\r\n\r\n      } catch (error) {\r\n          alert('A problem occurred while updating the new list position.');\r\n          console.error(error);\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default listModule;","const utils = {\r\n    hideModals: function() {\r\n        document.querySelectorAll('.modal').forEach(modal => modal.classList.remove('is-active'));\r\n    },\r\n}\r\n\r\nexport default utils;","import utils from \"./utils.js\";\r\nimport tagModule from \"./tag.js\";\r\n\r\nconst cardModule = {\r\n  // CREATE CARD HTML ELEMENT\r\n  makeInDOM: function(card) {\r\n    const \r\n      cardTemplate = document.querySelector('#cardTemplate').content,\r\n      cardHTML = document.importNode(cardTemplate, true),\r\n      cardContainer = document.querySelector(`[data-list-id=\"${card.list_id}\"] .panel-block`)\r\n\r\n    cardHTML.querySelector('.box').setAttribute('data-card-id', card.id);\r\n    cardHTML.querySelector('.box').setAttribute('data-card-position', card.position);\r\n    cardHTML.querySelector('.card-name').textContent = card.title;\r\n\r\n    // Update the form for modifications\r\n    cardHTML.querySelector('[name=\"id\"]').value = card.id;\r\n    cardHTML.querySelector('[name=\"title\"]').value = card.title;\r\n\r\n    // Event listeners\r\n    cardHTML.querySelector('#editCardButton').addEventListener('click', cardModule.showEditForm);\r\n    cardHTML.querySelector('form').addEventListener('submit', cardModule.handleEdit);\r\n    cardHTML.querySelector('#deleteCardButton').addEventListener('click', cardModule.handleDelete);\r\n    cardHTML.querySelector('#customTagButton').addEventListener('click', tagModule.showCustomModal);\r\n\r\n    // Add the new card in DOM\r\n    cardContainer.appendChild(cardHTML);\r\n  },\r\n\r\n  // ADD CARD\r\n  // Show modal for adding card\r\n  showAddModal: function(event) {\r\n    // Get the list ID\r\n    const list = event.target.closest('.panel');\r\n\r\n    // Count the number of cards to determine the position of the new one\r\n    const cardsNb = list.querySelectorAll('.box').length;\r\n\r\n    const listId = list.dataset.listId; // dataset[\"list-id\"]\r\n\r\n    const cardModal = document.querySelector('#addCardModal');\r\n\r\n    // For the hidden input\r\n    cardModal.querySelector('[name=\"list_id\"]').value = listId;\r\n    cardModal.querySelector('[name=\"position\"]').value = cardsNb + 1;\r\n\r\n\r\n    document.querySelector('#addCardModal').classList.add('is-active');\r\n  },\r\n\r\n  // ADD CARD\r\n  // Submit the new card form\r\n  handleAddForm: async function(event) {\r\n    event.preventDefault();                     \r\n    const formData = new FormData(event.target); \r\n\r\n    const payload = {};\r\n    formData.forEach((value, key) => payload[key] = value);\r\n\r\n    console.log(payload);\r\n\r\n    let response;\r\n    try {\r\n      response = await fetch('/cards', {\r\n        method: 'POST',\r\n        headers: { \r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if(response && response.ok) {\r\n        const newCard = await response.json();\r\n        console.log(newCard);\r\n        cardModule.makeInDOM(newCard);\r\n  \r\n        event.target.reset(); // reset input\r\n        utils.hideModals();                           \r\n      } \r\n      else {\r\n        const errorResponse = await response.json();\r\n        throw new Error(errorResponse.error);\r\n      }\r\n    } \r\n    catch (error) {\r\n      console.log(error);\r\n      alert(error.message)\r\n    }\r\n  },\r\n\r\n\r\n  // EDIT CARD\r\n  // Show the input to edit the card title\r\n  showEditForm: function(event) {\r\n    const editedCard = event.target.closest('.box');\r\n\r\n    editedCard.querySelector('.card-name').classList.add('is-hidden');\r\n    editedCard.querySelector('.card-name').nextElementSibling.classList.remove('is-hidden');\r\n  },\r\n\r\n  // EDIT CARD\r\n  // Sumbit update card title\r\n  handleEdit: async function(event) {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.target);\r\n\r\n    const payload = {};\r\n    formData.forEach((value, key) => payload[key] = value);\r\n    \r\n    // Get the card\r\n    const editedCard = event.target.closest('.box');\r\n    \r\n    let response;\r\n    try{\r\n      response = await fetch('/cards/' + payload.id, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if(response.ok) {\r\n        const edit = await response.json();\r\n        editedCard.querySelector('.card-name').textContent = edit.title; // Change the DOM title\r\n  \r\n        editedCard.querySelector('form').classList.add('is-hidden');\r\n        editedCard.querySelector('.card-name').classList.remove('is-hidden');\r\n      }\r\n      else {\r\n        const errorResponse = await response.json();\r\n        throw new Error(errorResponse.error);\r\n      }\r\n    } \r\n    catch (error) {alert(error.message)}\r\n  },\r\n    \r\n\r\n  // DELETE CARD\r\n  handleDelete: async function(event) {\r\n    const deletedCard = event.target.closest('.box');\r\n\r\n    const confirm = window.confirm('Are you sure you want to delete this card?');\r\n\r\n    if(confirm) {\r\n      let response;\r\n      try {\r\n        response = await fetch('/cards/' + deletedCard.dataset.cardId, { \r\n          method: 'DELETE',\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n       });\r\n\r\n      if(response.ok) {\r\n        deletedCard.remove();\r\n      } \r\n      else {\r\n        const errorResponse = await response.json();\r\n        throw new Error(errorResponse.error);\r\n      }\r\n    } \r\n      catch (error) { alert(error.message) }\r\n    } \r\n  \r\n  },\r\n\r\n  // UPDATE CARD POSITION\r\n  handleDragCard: function(event) {\r\n    let cards = event.from.querySelectorAll('.box');\r\n\r\n    // Save the position\r\n    cardModule.updateCards(cards);\r\n\r\n    // If the card is still in the same list, the function end there\r\n    if(event.from === event.to) return;\r\n\r\n    // Get the new card list and its id\r\n    cards = event.to.querySelectorAll('.box');\r\n    const listId = event.to.closest('.panel').dataset.listId;\r\n\r\n    // Save the position and the list container\r\n    cardModule.updateCards(cards, listId);\r\n  },\r\n\r\n  // SAVE CARD MODIFICATION IN API\r\n  updateCards: async function(cards, listId = null) {\r\n    cards.forEach(async (cards, index) => {\r\n      // formData is empty (no form on DOM)\r\n      // manually set with the index (and list container if there is a new one)\r\n      const formData = new FormData();\r\n      formData.set('position', index);\r\n      if(listId) formData.set('list_id', listId);\r\n\r\n      let response;\r\n      try {\r\n      response = await fetch('/cards/' + cards.dataset.cardId, {\r\n          method: 'PATCH',\r\n          headers: { \r\n          'accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(Object.fromEntries(formData)),\r\n      });\r\n      const json = await response.json();\r\n\r\n      if (!response.ok) throw json;\r\n\r\n      } catch (error) {\r\n        alert('A problem occurred while updating the new list position.');\r\n        console.error(error);\r\n      }\r\n\r\n    })\r\n  }\r\n}\r\n\r\nexport default cardModule;","import utils from \"./utils.js\";\n\nconst tagModule = {\n    // CREATE TAG HTML ELEMENT\n    makeInDOM: function(tag) {\n        const tagDOM = document.createElement('span');\n\n        tagDOM.dataset.tagId = tag.id;\n        tagDOM.textContent = tag.name;\n        tagDOM.style.backgroundColor = tag.color;\n        tagDOM.classList.add('tag', 'has-text-white');\n        \n        // Get card container\n        const cardDOM = document.querySelector(`.box[data-card-id=\"${tag.card_has_tag.card_id}\"]`);\n        // Add tag in DOM\n        cardDOM.querySelector('.tags').appendChild(tagDOM);\n    },\n\n    // CREATE CHECKBOX INPUT ELEMENT FOR FORM\n    makeInForm: function(tag, isChecked) {\n        // Label\n        const label = document.createElement('label');\n\n        label.classList.add('checkbok', 'is-block');\n        label.setAttribute('data-tags-id', tag.id);\n        label.textContent = tag.name;\n\n        // Checkbox input\n        const input = document.createElement('input');\n        input.setAttribute('type', 'checkbox');\n        input.setAttribute('name', tag.name);\n\n        // Check status\n        input.checked = isChecked;\n\n        label.prepend(input); // child of the label\n\n        // Add input in the form dom\n        document.querySelector('#addTagModal .field').append(label);\n    },\n\n    // UPDATE TAG CARD\n    // Show modal to customize the tag card\n    showCustomModal: async function(event) {\n        // Get the card\n        const card = event.target.closest('.box');\n        const cardId = card.dataset.cardId; \n\n        // Target the modal and update the form with the card id\n        const modal = document.querySelector('#addTagModal');\n        modal.querySelector('[name=\"id\"]').value = cardId;\n\n        // Get all the tags of the card to make an array with their id\n        const cardTags = Array.from(card.querySelectorAll('.tag'));\n        const associatedTagId = cardTags.map(tag => parseInt(tag.dataset.tagId));\n\n        let response;\n        try {\n            // Fetch all the API tags to display them in the form\n            response = await fetch('/tags', {method: 'GET' });\n\n            if(response.ok) {\n                const tags = await response.json();\n                // Empty the form so it doesn't interfere with other modifications tag\n                const field = document.querySelector('#addTagModal .field');\n                field.innerHTML = '';\n    \n                tags.forEach(tag => {\n                    // Check the box if the tag is already associated with the card\n                    if(associatedTagId.includes(tag.id)) {\n                        tagModule.makeInForm(tag, true);\n                    } \n                    // or don't check\n                    else {\n                        tagModule.makeInForm(tag, false);\n                    }\n                });\n            } else {\n                const errorResponse = await response.json();\n                throw new Error(errorResponse.error);\n              }\n        } catch (error) { \n          alert(error.message)\n        }\n        \n        // Show modal\n        document.querySelector('#addTagModal').classList.add('is-active');\n    },\n\n    // UPDATE TAG CARD\n    // Submit the modificated tags\n    handleCustomTag: async function(event) {\n        event.preventDefault();\n        const formData = new FormData(event.target); \n\n        // To have the card id\n        const param = {};\n        formData.forEach((value, key) => param[key] = value);\n\n        // Get all the check input tag\n        const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]:checked');\n        const checkedIds = [];\n        // Get the id of the check input tag\n        checkboxes.forEach(checkbox => {\n            const tagId = checkbox.parentElement.getAttribute('data-tags-id');\n            if (tagId) {\n                checkedIds.push(parseInt(tagId, 10)); // Parsing the ID as an integer\n            }\n        });\n    \n        // Prepare the payload in the right format\n        const payload = {\n            tagsId: JSON.stringify([...checkedIds])\n        };\n\n        let response;\n        try {\n        response = await fetch('/cards/' + param.id + '/tags', {\n            method: 'PATCH',\n            headers: { \n            'accept': 'application/json',\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        });\n\n        if(response.ok) {\n            const card = await response.json();\n\n            // Select the card and empty the old associate tag\n            const field = document.querySelector(`[data-card-id=\"${card.id}\"] .tags`);\n            field.innerHTML = '';\n\n            // Add the new associated tag\n            card.tags.forEach(tag => {\n                tagModule.makeInDOM(tag, true);\n            });\n\n            utils.hideModals();  \n        } else {\n            const errorResponse = await response.json();\n            throw new Error(errorResponse.error);\n        }\n        } catch (error) { alert(error.message)}\n\n       \n    },\n\n    \n}\n\nexport default tagModule;"],"names":["$c072e7e9da7baaac$export$2e2bcd8739ae039","hideModals","document","querySelectorAll","forEach","modal","classList","remove","$9dd025d1c1b722d2$var$tagModule","makeInDOM","tag","tagDOM","createElement","dataset","tagId","id","textContent","name","style","backgroundColor","color","add","cardDOM","querySelector","card_has_tag","card_id","appendChild","makeInForm","isChecked","label","setAttribute","input","checked","prepend","append","showCustomModal","event","response","card","target","closest","cardId","value","associatedTagId","cardTags","Array","from","map","parseInt","fetch","method","ok","tags","json","field","innerHTML","includes","errorResponse","Error","error","alert","message","handleCustomTag","preventDefault","formData","FormData","param","key","checkboxes","checkedIds","checkbox","parentElement","getAttribute","push","payload","tagsId","JSON","stringify","headers","body","$7228557d9085919b$var$cardModule","cardTemplate","content","cardHTML","importNode","cardContainer","list_id","position","title","addEventListener","showEditForm","handleEdit","handleDelete","showAddModal","list","cardsNb","length","listId","cardModal","handleAddForm","console","log","newCard","reset","editedCard","nextElementSibling","edit","deletedCard","window","confirm","handleDragCard","cards","updateCards","to","index","set","Object","fromEntries","$3ba4065045e1ccdf$var$listModule","list_template","listHTML","showEditList","handleEditForm","Sortable","create","group","draggable","onEnd","listNb","listModal","newList","listContainer","scrollTo","scrollWidth","data","editedList","get","deletedList","handleDragList","lists","$ae2a2df1a12e9716$var$app","init","addListeners","getListFromAPI","modalButtons","button"],"version":3,"file":"index.b3d72c04.js.map"}